
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ggplot2)
> library(ggpointdensity)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(ggrepel)
> library(grid)
> 
> 
> get_HLA_II_asso = function()
+ {
+   HLA_II_index = read.csv("../intermediate_files/HLA_II_index.csv",header = F)$V1 + 1
+   HLA_II_asso_res = numeric(length = length(HLA_II_index))
+   HLA_II_asso_training_size = numeric(length=length(HLA_II_index))
+   
+   CMV_subj = which(!is.na( CMV ))
+   res_index = 1
+   for (HLA_index in HLA_II_index) {
+     # the subject index for fisher exact test
+     subj_inx = intersect(which(!is.na(split_HLA[HLA_index,])), CMV_subj)
+     subj_size = length(subj_inx)
+     HLA_dat = split_HLA[HLA_index, subj_inx]
+     CMV_dat = CMV[subj_inx]
+     res_00 = res_01 = res_10 = res_11 = 0;
+     
+     for (i in 1:subj_size) {
+       if (HLA_dat[i] == 0 &&  CMV_dat[i] == 0 ) {
+         res_00 = res_00 + 1
+       }
+       if (HLA_dat[i] == 0 &&  CMV_dat[i] == 1 ) {
+         res_01 = res_01 + 1
+       }
+       if (HLA_dat[i] == 1 &&  CMV_dat[i] == 0 ) {
+         res_10 = res_10 + 1
+       }
+       if (HLA_dat[i] == 1 &&  CMV_dat[i] == 1 ) {
+         res_11 = res_11 + 1
+       }
+     }
+     
+     test_mat = matrix(c(res_00, res_01, res_10,res_11),nrow=2, byrow = T)
+     test_res = fisher.test(test_mat, alternative = "two.sided")
+     HLA_II_asso_res[res_index] = test_res$p.value
+     HLA_II_asso_training_size[res_index] = subj_size
+     res_index = res_index + 1
+   }
+   # here the indexes are already converted to 1-indexed  
+   df_HLA_II_res = data.frame(HLA_II_index = HLA_II_index, 
+                              HLA_II_asso_training_size = HLA_II_asso_training_size, 
+                              pvalue = HLA_II_asso_res)  
+   return(df_HLA_II_res)
+ }
> 
> get_HLA_I_asso = function()
+ {
+   
+   HLA_I_index = read.csv("../intermediate_files/HLA_I_index.csv",header = F)$V1 + 1
+   HLA_I_asso_res = numeric(85)
+   HLA_I_asso_training_size = numeric(85)
+   
+   CMV_subj = which(!is.na( CMV ))
+   res_index = 1
+   
+   for (HLA_index in HLA_I_index) {
+     # the subject index for fisher exact test
+     subj_inx = intersect(which(!is.na(split_HLA[HLA_index,])), CMV_subj)
+     subj_size = length(subj_inx)
+     HLA_dat = split_HLA[HLA_index, subj_inx]
+     CMV_dat = CMV[subj_inx]
+     res_00 = res_01 = res_10 = res_11 = 0;
+     
+     for (i in 1:subj_size) {
+       if (HLA_dat[i] == 0 &&  CMV_dat[i] == 0 ) {
+         res_00 = res_00 + 1
+       }
+       if (HLA_dat[i] == 0 &&  CMV_dat[i] == 1 ) {
+         res_01 = res_01 + 1
+       }
+       if (HLA_dat[i] == 1 &&  CMV_dat[i] == 0 ) {
+         res_10 = res_10 + 1
+       }
+       if (HLA_dat[i] == 1 &&  CMV_dat[i] == 1 ) {
+         res_11 = res_11 + 1
+       }
+     }
+     
+     test_mat = matrix(c(res_00, res_01, res_10,res_11),nrow=2, byrow = T)
+     test_res = fisher.test(test_mat, alternative = "two.sided")
+     HLA_I_asso_res[res_index] = test_res$p.value
+     HLA_I_asso_training_size[res_index] = subj_size
+     res_index = res_index + 1
+   }
+   # here the indexes are already converted to 1-indexed
+   df_HLA_I_res = data.frame(HLA_I_index = HLA_I_index, 
+                             HLA_I_asso_training_size = HLA_I_asso_training_size, 
+                             pvalue = HLA_I_asso_res)
+   
+   return(df_HLA_I_res)
+ }
> 
> 
> split_HLA = readRDS("../../../intermediate_files/complete_HLA_NAs_kept.rds")
> CMV = read.csv("../../../specific_HLA_pred/data_files/CMV.txt")
> CMV = CMV$x
> 
> df_HLA_I_res = get_HLA_I_asso()
> df_HLA_II_res = get_HLA_II_asso()
> 
> 
> write.csv(df_HLA_I_res, 
+           "results/HLA_I_CMV_asso_res.csv", 
+           row.names = FALSE)
> 
> write.csv(df_HLA_II_res, 
+           "results/HLA_II_CMV_asso_res.csv", 
+           row.names = FALSE)
> 
> sessionInfo()
R version 4.4.0 (2024-04-24)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 18.04.6 LTS

Matrix products: default
BLAS/LAPACK: FlexiBLAS OPENBLAS;  LAPACK version 3.11.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

time zone: America/Los_Angeles
tzcode source: system (glibc)

attached base packages:
[1] grid      stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
[1] ggrepel_0.9.6        gridExtra_2.3        ggpointdensity_0.1.0
[4] ggplot2_3.5.2        dplyr_1.1.4         

loaded via a namespace (and not attached):
 [1] RColorBrewer_1.1-3 R6_2.6.1           tidyselect_1.2.1   farver_2.1.2      
 [5] magrittr_2.0.3     gtable_0.3.6       glue_1.8.0         tibble_3.2.1      
 [9] dichromat_2.0-0.1  pkgconfig_2.0.3    generics_0.1.4     lifecycle_1.0.4   
[13] cli_3.6.5          scales_1.4.0       vctrs_0.6.5        withr_3.0.2       
[17] compiler_4.4.0     pillar_1.10.2      Rcpp_1.0.14        rlang_1.1.6       
> q(save = "no")
> proc.time()
   user  system elapsed 
  1.380   0.686   5.678 
