
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> set.seed(611)
> HLA  = readRDS("../../data/DeWitt_2018/HLA_v2_CMV_data.rds")
> HLA_no_NA = HLA[,!is.na(HLA[216,])]
> HLA_only = HLA_no_NA[1:215,]
> CMV = HLA_no_NA[216,]
> 
> train_index_mat = matrix(nrow=10, ncol=512)
> test_index_mat = matrix(nrow = 10, ncol = 129)
> index_to_sample = 1:length(CMV)
> 
> for (i in 1:10) {
+   train_index_mat[i,] =  sort(sample(index_to_sample, 512))
+   test_index_mat[i,] = setdiff(index_to_sample, train_index_mat[i,])
+ }
> #train_index_mat[1,]
> 
> HLA_I_index = read.csv("../../codes/intermediate_files/HLA_I_index.csv", header = F)$V1+1
> HLA_II_index = read.csv("../../codes/intermediate_files/HLA_II_index.csv", header = F)$V1+1
> 
> # train must have 32, test must have 8
> # all the HLAs in the HLA_matrix is either HLA_I or HLA_II
> dim(HLA_no_NA)
[1] 216 641
> subj_counts = rowSums(HLA_no_NA[-216,], na.rm = T)
> #which(subj_counts >= 40 & subj_counts <= 70)
> mid_HLAs =  subj_counts[subj_counts >= 40 & subj_counts <= 70]
> mid_HLA_indexes = match(names(mid_HLAs), rownames(HLA_no_NA))
> 
> length(subj_counts[subj_counts < 40])
[1] 170
> length(subj_counts[subj_counts < 30])
[1] 155
> 
> mid_HLA_indexes
 [1]   1   9  27  42  56  66  70  85  87  89  91  93 131 139 182 187 197 200 212
[20] 214
> 
> # what I need now is a function that sort of filters it
> 
> HLA_mid_or_not_split = function(train_index, test_index, HLA_index, HLA_mat)
+ {
+   train_sum = sum(HLA_mat[HLA_index, train_index], na.rm = T)
+   test_sum = sum(HLA_mat[HLA_index, test_index], na.rm = T)
+   
+   if (train_sum >=32 & test_sum >= 8) {
+     return(1)
+   }
+   return(0)
+ }
> 
> res_mat = matrix(nrow= length(mid_HLA_indexes), ncol = 10)
> 
> 
> for (index in 1:length(mid_HLA_indexes)) {
+   res_vec = numeric(10)
+   for (i in 1:10) {
+     res_vec[i] = HLA_mid_or_not_split(train_index_mat[i,], test_index_mat[i,], mid_HLA_indexes[index] , HLA_no_NA)
+   }
+   res_mat[index,] = res_vec
+ }
> 
> res_mat
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]
 [1,]    1    0    0    1    1    1    1    0    0     1
 [2,]    1    1    0    1    1    1    1    1    1     1
 [3,]    1    1    1    1    0    1    1    1    1     1
 [4,]    0    0    1    1    1    1    1    1    0     1
 [5,]    0    0    1    1    1    1    0    0    0     0
 [6,]    0    0    1    0    0    0    1    0    0     1
 [7,]    0    1    0    1    1    0    1    1    1     1
 [8,]    1    1    1    1    1    1    0    1    1     1
 [9,]    1    1    1    1    1    1    1    0    1     1
[10,]    1    0    1    1    1    0    1    0    1     1
[11,]    1    1    1    1    1    1    1    1    1     1
[12,]    1    1    1    1    0    1    1    1    1     0
[13,]    1    1    1    1    1    0    0    1    1     1
[14,]    1    0    0    0    1    1    0    1    1     0
[15,]    1    0    0    1    1    0    0    1    1     1
[16,]    0    1    1    1    1    1    0    0    1     0
[17,]    1    1    1    0    0    1    1    1    1     1
[18,]    1    1    1    1    1    1    1    1    1     1
[19,]    1    1    1    1    1    1    1    1    1     1
[20,]    1    1    1    1    1    1    1    1    1     0
> 
> mid_HLA_indexes
 [1]   1   9  27  42  56  66  70  85  87  89  91  93 131 139 182 187 197 200 212
[20] 214
> 
> # account for haplotype HLA-DRDQ*13:01_01:03_06:03
> # among the splits for it
> # HLA-DRB*13:01 takes row 89 (R index)
> # in the python code split_knn.py, HLA-DQAB*01:03_06:03 takes row 219 (R index)
> mid_HLA_indexes = c(mid_HLA_indexes, 219)
> mid_HLA_indexes
 [1]   1   9  27  42  56  66  70  85  87  89  91  93 131 139 182 187 197 200 212
[20] 214 219
> length(mid_HLA_indexes)
[1] 21
> 
> # since they form a haplotype, they appear exactly in the same set of individuals
> rownames(HLA_no_NA)[89]
[1] "HLA-DRDQ*13:01_01:03_06:03"
> which(mid_HLA_indexes==89)
[1] 10
> res_mat = rbind(res_mat, res_mat[which(mid_HLA_indexes==89), ])
> 
> write.table(res_mat, "../../codes/intermediate_files/split_mat.csv", row.names = F, sep=",",col.names = F)
> write.table(mid_HLA_indexes-1, "../../codes/intermediate_files/mid_HLA_index.csv", row.names = F, col.names = F)
> write.table(train_index_mat-1, "../../codes/intermediate_files/split_train_index.csv", row.names = F, sep=",",col.names = F)
> write.table(test_index_mat-1, "../../codes/intermediate_files/split_test_index.csv", row.names = F, sep=",",col.names = F)
> 
> 
> sessionInfo()
R version 4.4.0 (2024-04-24)
Platform: x86_64-pc-linux-gnu
Running under: Ubuntu 18.04.6 LTS

Matrix products: default
BLAS/LAPACK: FlexiBLAS OPENBLAS;  LAPACK version 3.11.0

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

time zone: America/Los_Angeles
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] dplyr_1.1.4

loaded via a namespace (and not attached):
 [1] tidyselect_1.2.1 compiler_4.4.0   magrittr_2.0.3   R6_2.6.1        
 [5] generics_0.1.4   cli_3.6.5        pillar_1.10.2    glue_1.8.0      
 [9] tibble_3.2.1     vctrs_0.6.5      lifecycle_1.0.4  pkgconfig_2.0.3 
[13] rlang_1.1.6     
> q(save = "no")
> proc.time()
   user  system elapsed 
  0.626   0.350   1.592 
